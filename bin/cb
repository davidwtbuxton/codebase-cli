#!/usr/bin/python
import sys
import ConfigParser
import re
import requests

from lxml import etree

from git.repo.base import Repo

config = ConfigParser.SafeConfigParser()
config.read('.cbconfig')

AUTH_USERNAME = config.get('auth', 'username')
AUTH_TOKEN = config.get('auth', 'token')
AUTH_CREDENTIALS = (AUTH_USERNAME, AUTH_TOKEN,)

PROJECT_NAME = config.get('project', 'name')

API_URL = 'https://api3.codebasehq.com/%s/' % PROJECT_NAME


class CommandNotFound(Exception):
    pass


class Commander(object):

    def __init__(self):
        self.function_map = {}

    def command(self, *args):
        key = args

        def wrapper(func):
            self.function_map[key] = func
            return func

        return wrapper

    def run_command(self, command_args):
        command_found = False
        command_end = len(command_args)
        command = tuple(command_args[1:])
        arguments = tuple(command_args[command_end:])
        while not command_found and command:
            try:
                func = commander.function_map[command]
            except KeyError:
                command_end = command_end - 1
                command = tuple(command_args[1:command_end])
                arguments = tuple(command_args[command_end:])
            else:
                command_found = True
                func(*arguments)
        if not command_found:
            raise CommandNotFound


commander = Commander()
repo = Repo()


@commander.command('ticket')
def ticket(number):
    '''Links to the supplied ticket number for any subsequent commands.'''
    pass


@commander.command('status')
def status(ticket_number=None):
    '''Gets the status of the current ticket.'''
    branch_name = repo.active_branch.name
    if not ticket_number:
        branch_name = repo.active_branch.name
        ticket_no = re.match('^(?:ticket-)?([0-9]+)', branch_name).groups()[0]
    else:
        ticket_no = ticket_number

    res = requests.get('%stickets/%s' % (API_URL, ticket_no), auth=AUTH_CREDENTIALS)
    content = res.content
    root = etree.fromstring(content)
    print root.xpath('/ticket/status/name')[0].text


@commander.command('status', 'update')
def status_update(new_status=None):
    '''Sets the status of the ticket.'''
    branch_name = repo.active_branch.name
    ticket_no = re.match('^(?:ticket-)?([0-9]+)', branch_name).groups()[0]

    invalid = False

    res = requests.get('%stickets/statuses/' % API_URL, auth=AUTH_CREDENTIALS)
    content = res.content
    root = etree.fromstring(content)
    statuses = root.xpath('/ticketing-statuses/ticketing-status')
    ids = {i: status.find('id').text for i, status in enumerate(statuses, 1)}

    if not new_status:
        print 'Please select an option:'
        for i, status in enumerate(statuses, 1):
            print '%d: %s' % (i, status.find('name').text)
        try:
            status = int(raw_input('Please select from the above: '))
        except ValueError:
            invalid = True
    else:
        try:
            status = int(new_status)
        except ValueError:
            invalid = True

    if status not in range(1, len(statuses)) or invalid:
        print 'Unknown value'
    else:
        post_data = '<ticket-note><content></content><changes><status-id>%s</status-id></changes></ticket-note>' % ids[status]
        res = requests.post(
            '%stickets/%s/notes' % (API_URL, ticket_no),
            auth=AUTH_CREDENTIALS,
            data=post_data,
            headers={'content-type': 'application/xml'},
            )


@commander.command('statuses')
def statuses():
    '''Gets the available statuses for a ticket.'''
    res = requests.get('%stickets/statuses' % API_URL, auth=AUTH_CREDENTIALS)
    content = res.content
    root = etree.fromstring(content)
    statuses = root.xpath('/ticketing-statuses/ticketing-status')
    for i, status in enumerate(statuses, 1):
        print '%d: %s' % (i, status.find('name').text)


@commander.command('assign')
@commander.command('assigned')
def assigned():
    '''Gets the currently assigned user.'''
    pass


@commander.command('assign', 'update')
@commander.command('assigned', 'update')
def assigned_update(user):
    '''Sets the assigned user.'''
    pass


@commander.command('comments')
def comments(user=''):
    '''Gets a log of the comments.'''
    pass


@commander.command('comment', 'update')
def comments_update(message=''):
    '''Creates a comment.'''
    pass


if __name__ == "__main__":
    try:
        commander.run_command(sys.argv)
    except CommandNotFound:
        print 'Command not found'
    except TypeError:
        print 'Incorrect number of arguments'
