#!/usr/bin/python
import sys
import ConfigParser
import re
import requests
import tempfile
import os
import json
import functools

from datetime import datetime

from subprocess import call

from lxml import etree

from git.repo.base import Repo

config = ConfigParser.SafeConfigParser()
config.read('.cbconfig')

AUTH_USERNAME = config.get('auth', 'username')
AUTH_TOKEN = config.get('auth', 'token')
AUTH_CREDENTIALS = (AUTH_USERNAME, AUTH_TOKEN,)

PROJECT_NAME = config.get('project', 'name')

API_URL = 'https://api3.codebasehq.com/%s/' % PROJECT_NAME

EDITOR = os.environ.get('EDITOR', 'vim')


class CommandNotFound(Exception):
    pass


class Commander(object):

    def __init__(self):
        self.function_map = {}

    def command(self, *args):
        key = args

        def wrapper(func):
            self.function_map[key] = func
            return func

        return wrapper

    def run_command(self, command_args):
        command_found = False
        command_end = len(command_args)
        command = tuple(command_args[1:])
        arguments = tuple(command_args[command_end:])
        while not command_found and command:
            try:
                func = commander.function_map[command]
            except KeyError:
                command_end = command_end - 1
                command = tuple(command_args[1:command_end])
                arguments = tuple(command_args[command_end:])
            else:
                command_found = True
                func(*arguments)
        if not command_found:
            raise CommandNotFound


commander = Commander()


authed_get = functools.partial(requests.get(auth=AUTH_CREDENTIALS))
authed_post = functools.partial(requests.post(auth=AUTH_CREDENTIALS))


def get_ticket_number():
    repo = Repo()

    branch_name = repo.active_branch.name
    try:
        return re.match('^(?:ticket-)?([0-9]+)', branch_name).groups()[0]
    except AttributeError:
        print 'Could not retrieve ticket number from branch name "%s".' % branch_name


@commander.command('status')
def status(ticket_number=None):
    '''Gets the status of the current ticket.'''
    if not ticket_number:
        ticket_no = get_ticket_number()
    else:
        ticket_no = ticket_number

    res = authed_get('%stickets/%s' % (API_URL, ticket_no))
    content = res.content
    root = etree.fromstring(content)
    print root.xpath('/ticket/status/name')[0].text


@commander.command('status', 'update')
def status_update(new_status=None):
    '''Sets the status of the ticket.'''
    ticket_no = get_ticket_number()

    invalid = False

    res = authed_get('%stickets/statuses/' % API_URL)
    content = res.content
    root = etree.fromstring(content)
    statuses = root.xpath('/ticketing-statuses/ticketing-status')
    ids = {i: status.find('id').text for i, status in enumerate(statuses, 1)}

    if not new_status:
        print 'Please select an option:'
        for i, status in enumerate(statuses, 1):
            print '%d: %s' % (i, status.find('name').text)
        try:
            status = int(raw_input('Please select from the above: '))
        except ValueError:
            invalid = True
    else:
        try:
            status = int(new_status)
        except ValueError:
            invalid = True

    if status not in range(1, len(statuses)) or invalid:
        print 'Unknown value'
    else:
        post_data = '<ticket-note><content></content><changes><status-id>%s</status-id></changes></ticket-note>' % ids[status]
        res = authed_post(
            '%stickets/%s/notes' % (API_URL, ticket_no),
            auth=AUTH_CREDENTIALS,
            data=post_data,
            headers={'content-type': 'application/xml'},
        )


@commander.command('statuses')
def statuses():
    '''Gets the available statuses for a ticket.'''
    res = authed_get('%stickets/statuses' % API_URL)
    content = res.content
    root = etree.fromstring(content)
    statuses = root.xpath('/ticketing-statuses/ticketing-status')
    for i, status in enumerate(statuses, 1):
        print '%d: %s' % (i, status.find('name').text)


def get_user_details():
    res = authed_get('%sassignments' % API_URL)
    content = res.content
    assignments_root = etree.fromstring(content)
    user_details = {}
    for assignment in assignments_root.xpath('/users/user'):
        user_details[assignment.xpath('id')[0].text] = {
            'first_name': assignment.xpath('first-name')[0].text,
            'last_name': assignment.xpath('last-name')[0].text,
        }

    return user_details


@commander.command('assign')
@commander.command('assigned')
def assigned():
    '''Gets the currently assigned user.'''
    ticket_no = get_ticket_number()

    user_details = get_user_details()
    res = authed_get('%stickets/%s' % (API_URL, ticket_no))
    content = res.content
    root = etree.fromstring(content)
    assignee_id = root.xpath('/ticket/assignee-id')[0].text
    assignee_details = user_details[assignee_id]
    print '%s %s' % (assignee_details['first_name'], assignee_details['last_name']


@commander.command('assign', 'update')
@commander.command('assigned', 'update')
def assigned_update(user):
    '''Sets the assigned user.'''
    pass


@commander.command('comments')
def comments():
    '''Gets a log of the comments.'''
    ticket_no = get_ticket_number()
    res = authed_get('%stickets/%s/notes' % (API_URL, ticket_no))
    content = res.content
    notes_root = etree.fromstring(content)
    user_details = get_user_details()
    for comment in notes_root.xpath('/ticket-notes/ticket-note'):
        created_at = datetime.strptime(comment.xpath('created-at')[0].text, '%Y-%m-%dT%H:%M:%SZ')
        content = comment.xpath('content')[0].text
        update = json.loads(comment.xpath('updates')[0].text)
        user_id = comment.xpath('user-id')[0].text
        author_details = user_details[user_id]
        print 'Author: %s %s' % (author_details['first_name'], author_details['last_name'])
        print 'Date:   %s\n' % created_at.strftime('%c')
        if content:
            print content
            print ''
        if update:
            if 'assignee_id' in update:
                print 'Assignee changed from "%s" to "%s"' % (update['assignee_id'][0], update['assignee_id'][1])
            if 'status_id' in update:
                print 'Status changed from "%s" to "%s"' % (update['status_id'][0], update['status_id'][1])
            if 'priority_id' in update:
                print 'Priority changed from "%s" to "%s"' % (update['priority_id'][0], update['priority_id'][1])
            if 'category_id' in update:
                print 'Category changed from "%s" to "%s"' % (update['category_id'][0], update['category_id'][1])
            if 'milestone_id' in update:
                print 'Milestone changed from "%s" to "%s"' % (update['milestone_id'][0], update['milestone_id'][1])
            print ''


@commander.command('comment', 'update')
@commander.command('comments', 'update')
def comments_update(message=None):
    '''Creates a comment.'''
    if not message:
        with tempfile.NamedTemporaryFile() as comment_file:
            call([EDITOR, comment_file.name])
            with open(comment_file.name):
                comment_file_aux = open(comment_file.name)
                message = comment_file_aux.read()

    if message:
        post_data = '<ticket-note><content>%s</content><changes></changes></ticket-note>' % message
        res = authed_post(
            '%stickets/%s/notes' % (API_URL, ticket_no),
            auth=AUTH_CREDENTIALS,
            data=post_data,
            headers={'content-type': 'application/xml'},
        )
    else:
        print 'Aborting due to empty update message'


if __name__ == "__main__":
    try:
        commander.run_command(sys.argv)
    except CommandNotFound:
        print 'Command not found'
    except TypeError:
        print 'Incorrect number of arguments'
